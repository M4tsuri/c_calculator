digraph G {
    // the begining of a statement, lsymbol represents the assigned variable or a function 
    "TOKEN_SEMICOLON" -> "TOKEN_LSYMBOL";
    "TOKEN_SEMICOLON" -> "TOKEN_DECL";
    
    // a declaration, the declared symbol is dsymbol
    "TOKEN_DECL" -> "TOKEN_DSYMBOL" -> "TOKEN_SEMICOLON";
    
    // a lsymbol is at the start of an assign or a function call
    "TOKEN_LSYMBOL" -> "TOKEN_ASSIGN";
    "TOKEN_LSYMBOL" -> "TOKEN_LPAREN";
    
    // an expression is the rhs of assign
    // expressions must start with '(', symbol or number
    "TOKEN_ASSIGN" -> "TOKEN_LPAREN";
    "TOKEN_ASSIGN" -> "TOKEN_RSYMBOL";
    "TOKEN_ASSIGN" -> "TOKEN_NUMBER";
    "TOKEN_ASSIGN" -> "TOKEN_UNOP";
    
    // '(' is followed by an expression
    "TOKEN_UNOP" -> "TOKEN_LPAREN";
    "TOKEN_UNOP" -> "TOKEN_RSYMBOL";
    "TOKEN_UNOP" -> "TOKEN_NUMBER";
    
    // '(' is followed by an expression
    "TOKEN_LPAREN" -> "TOKEN_LPAREN";
    "TOKEN_LPAREN" -> "TOKEN_RSYMBOL";
    "TOKEN_LPAREN" -> "TOKEN_NUMBER";
    "TOKEN_LPAREN" -> "TOKEN_UNOP";
    
    // a rsymbol or number is followed by a binop
    "TOKEN_RSYMBOL" -> "TOKEN_BINOP";
    "TOKEN_NUMBER" -> "TOKEN_BINOP";
    
    // a binop is followed by an expression (cannot start with an unary op)
    "TOKEN_BINOP" -> "TOKEN_LPAREN";
    "TOKEN_BINOP" -> "TOKEN_RSYMBOL";
    "TOKEN_BINOP" -> "TOKEN_NUMBER";
    
    "TOKEN_RPAREN" -> "TOKEN_SEMICOLON";
    "TOKEN_RSYMBOL" -> "TOKEN_SEMICOLON";
    "TOKEN_NUMBER" -> "TOKEN_SEMICOLON";
    
    "TOKEN_RSYMBOL" -> "TOKEN_RPAREN";
    "TOKEN_RPAREN" -> "TOKEN_RPAREN";
    "TOKEN_NUMBER" -> "TOKEN_RPAREN";
    "TOKEN_LPAREN" -> "TOKEN_RPAREN";
    
    "TOKEN_RPAREN" -> "TOKEN_END";
    "TOKEN_RPAREN" -> "TOKEN_BINOP";

    "TOKEN_RSYMBOL" -> "TOKEN_END";
    "TOKEN_NUMBER" -> "TOKEN_END";
    "TOKEN_DSYMBOL" -> "TOKEN_END";
}